# esp32_brain.py (for MicroPython on ESP32 - CORRECTED for math module and button activation)
from machine import Pin, UART
from time import sleep
import math # Use MicroPython's built-in math module
import heapq # For Dijkstra's
from collections import deque

# --- LED Indicators (Optional but Recommended for Debugging) ---
led_board = Pin(2, Pin.OUT)     # Onboard LED
led_yellow = Pin(4, Pin.OUT)    # Example GPIOs for indicating states/sensors
led_blue = Pin(23, Pin.OUT)
led_green = Pin(22, Pin.OUT)
led_red = Pin(21, Pin.OUT)

# --- Button Setup ---
button_start = Pin(35, Pin.IN, Pin.PULL_DOWN) # Assuming button_right is used for starting the robot

# --- Initial Message and Wait for Button Press ---
led_board.value(1) # Turn on onboard LED to indicate "waiting" state
print("--------------------------------------------------")
print("  ESP32 Brain: Waiting for button press to start  ")
print("  Press the button connected to GPIO35 to begin.  ")
print("--------------------------------------------------")

while not button_start.value():
    sleep(0.1) # Wait for the button to be pressed

led_board.value(0) # Turn off LED once button is pressed
print("Button pressed! Starting robot control...")
sleep(1) # Small delay after button press for debouncing/feedback

# --- UART Setup ---
try:
    # Adjust UART(1, ...) if you are using different pins for USB-Serial on your board
    # TX on GPIO1, RX on GPIO3 (Standard for some ESP32 DevKits with USB-Serial)
    uart = UART(1, 115200, tx=Pin(1), rx=Pin(3))
    uart.init(115200, bits=8, parity=None, stop=1, timeout=50) # timeout in ms
    print("UART initialized for communication with Webots.")
except Exception as e:
    print(f"ERROR: UART initialization failed: {e}. Check pins and wiring.")
    # For a real robot, you might want to stop or enter a safe mode here.

# --- Grid Map Definition and Navigation (with weights) ---
corrected_weighted_grid = {
    # Parking spots (P nodes)
    "P1": {"S": ("A1", 2.0)},
    "P2": {"S": ("A2", 2.0)},
    "P3": {"S": ("A3", 2.0)},
    "P4": {"S": ("A4", 2.0)},
    "P5": {"N": ("E3", 2.0)},
    "P6": {"N": ("E4", 2.0)},
    "P7": {"N": ("E5", 2.0)},
    "P8": {"N": ("E6", 2.0)},

    # A row
    "A1": {"N": ("P1", 2.0), "E": ("A2", 1.0), "S": ("C1", 3.0)},
    "A2": {"N": ("P2", 2.0), "E": ("A3", 1.0), "W": ("A1", 1.0)},
    "A3": {"N": ("P3", 2.0), "E": ("A4", 1.0), "W": ("A2", 1.0)},
    "A4": {"N": ("P4", 2.0), "E": ("A5", 1.0), "W": ("A3", 1.0)},
    "A5": {"N": None, "E": ("A6", 1.0), "S": ("B1", 1.0), "W": ("A4", 1.0)},
    "A6": {"N": None, "E": None, "S": ("B2", 1.0), "W": ("A5", 1.0)},

    # B row
    "B1": {"N": ("A5", 1.0), "E": ("B2", 1.0), "S": ("C2", 1.0)},
    "B2": {"N": ("A6", 1.0), "E": None, "S": ("C3", 1.0), "W": ("B1", 1.0)},

    # C row
    "C1": {"N": ("A1", 3.0), "E": ("C2", 1.0), "S": ("D1", 1.0)},
    "C2": {"N": ("B1", 1.0), "E": ("C3", 1.0), "S": ("D2", 1.0), "W": ("C1", 1.0)},
    "C3": {"N": ("B2", 1.0), "E": None, "S": ("E6", 1.0), "W": ("C2", 1.0)},

    # D row
    "D1": {"N": ("C1", 1.0), "E": ("D2", 1.0), "S": ("E1", 1.0)},
    "D2": {"N": ("C2", 1.0), "E": None, "S": ("E2", 1.0), "W": ("D1", 5.0)},

    # E row
    "E1": {"N": ("D1", 1.0), "E": ("E2", 1.0), "S": None, "W": None},
    "E2": {"N": ("D2", 1.0), "E": ("E3", 1.0), "S": None, "W": ("E1", 1.0)},
    "E3": {"S": ("P5", 2.0), "E": ("E4", 1.0), "N": None, "W": ("E2", 1.0)},
    "E4": {"S": ("P6", 2.0), "E": ("E5", 1.0), "N": None, "W": ("E3", 1.0)},
    "E5": {"S": ("P7", 2.0), "E": ("E6", 1.0), "N": None, "W": ("E4", 1.0)},
    "E6": {"N": ("C3", 1.0), "E": None, "S": ("P8", 2.0), "W": ("E5", 1.0)},
}

def find_path_dijkstra(start_node, goal_node, grid_map_weighted, blocked_nodes=None):
    if blocked_nodes is None:
        blocked_nodes = set()

    if start_node not in grid_map_weighted or goal_node not in grid_map_weighted:
        print(f"Error: Invalid nodes - Start: {start_node}, Goal: {goal_node}")
        return []

    distances = {node: float('infinity') for node in grid_map_weighted}
    distances[start_node] = 0
    priority_queue = [(0, start_node, [start_node])] # (distance, node, path)

    while priority_queue:
        current_distance, current_node_pq, path_pq = heapq.heappop(priority_queue)

        if current_distance > distances[current_node_pq]:
            continue

        if current_node_pq == goal_node:
            return path_pq

        for direction, neighbor_info in grid_map_weighted[current_node_pq].items():
            if neighbor_info:
                neighbor, weight = neighbor_info
                if neighbor not in blocked_nodes:
                    distance = current_distance + weight
                    if distance < distances[neighbor]:
                        distances[neighbor] = distance
                        new_path = path_pq + [neighbor]
                        heapq.heappush(priority_queue, (distance, neighbor, new_path))

    print(f"No path found from {start_node} to {goal_node}")
    return []

def get_direction_to_next_node(current_node, next_node, grid_map_weighted):
    if current_node not in grid_map_weighted:
        print(f"ERROR: get_direction_to_next_node: current_node '{current_node}' not in grid_map_weighted.")
        return None
    for direction, neighbor_info in grid_map_weighted[current_node].items():
        if neighbor_info and neighbor_info[0] == next_node:
            return direction
    print(f"ERROR: get_direction_to_next_node: No direct connection found from '{current_node}' to '{next_node}'.")
    return None

def direction_to_robot_action(direction, current_heading):
    direction_angles = {
        'N': math.pi/2, # North (positive Y axis)
        'E': 0,       # East (positive X axis)
        'S': -math.pi/2, # South (negative Y axis)
        'W': math.pi    # West (negative X axis)
    }
    if direction not in direction_angles:
        print(f"WARNING: Unknown direction '{direction}'. Defaulting to 'forward'.")
        return 'forward', 0.0
    target_angle = direction_angles[direction]
    current_heading = normalize_angle(current_heading)
    target_angle = normalize_angle(target_angle)
    angle_diff = math.atan2(math.sin(target_angle - current_heading), math.cos(target_angle - current_heading))
    if abs(angle_diff) < 0.1: # Approx 5.7 degrees
        return 'forward', angle_diff
    elif abs(angle_diff - math.pi) < 0.2 or abs(angle_diff + math.pi) < 0.2: # Close to 180 degrees
        return 'turn_around', angle_diff
    else:
        return 'turn_left' if angle_diff > 0 else 'turn_right', angle_diff

def normalize_angle(angle):
    while angle > math.pi: angle -= 2*math.pi
    while angle < -math.pi: angle += 2*math.pi
    return angle

# --- Robot Control Parameters & State Variables (identical to original) ---
MAX_SPEED = 6.28 # Max speed for Webots motors
base_speed = MAX_SPEED * 0.5
max_turn_speed_diff = MAX_SPEED * 0.4

kp = 2.0
ki = 0.2
kd = 0.4
previous_error = 0.0
integral_error = 0.0
error_history = deque(maxlen=5)

consecutive_no_line = 0
max_no_line_steps = 10
last_known_direction = 'center'

cross_counter = 0
CROSS_COUNTER_MIN = 8 # Number of consecutive "all line sensors on" readings
INTERSECTION_DRIVE_THROUGH_DURATION = 35

turn_action = 'forward'
expected_heading_change = 0.0

stop_counter = 0
turn_counter = 0
post_turn_counter = 0
line_search_counter = 0

STOP_DURATION = 15
POST_TURN_PAUSE = 20
LINE_SEARCH_DURATION = 30

turn_start_heading = 0.0
heading_tolerance = 0.08 # Radians (approx 4.5 degrees)
turn_kp = 1.0 # Proportional gain for turning

obstacle_threshold = 85.0 # This threshold is for Webots PS values
node_that_caused_obstacle = None
blocked_nodes_for_replan = set()

# --- Initial Navigation State ---
start_node = "P3"
goal_node = "P8"
current_node = start_node
next_node_index = 1

path = find_path_dijkstra(start_node, goal_node, corrected_weighted_grid)
print(f"Initial Path from {start_node} to {goal_node}: {' -> '.join(path if path else ['No Path Found'])}")

robot_state = 'line_following' if len(path) >= 2 else 'stopping'
if len(path) < 2:
    print("ERROR: No valid path found or path is too short! Robot will stop.")
    path = [start_node] if start_node else []
    next_node_index = 0
else:
    print(f"First target node in path: {path[next_node_index]}")

# --- Helper Functions (specific to ESP32 calculations) ---
def calculate_line_error(line_left, line_center, line_right):
    line_threshold = 600.0 # Same threshold as in Webots controller

    # Re-evaluating based on the Webots side converting to 0/1 bits:
    # If Webots sends '0' for NO LINE and '1' for LINE DETECTED (as bits):
    # And then we pass these as the original 'gs_val_left' etc.
    # We should re-interpret what 'gs_val_left' etc. actually contain now.
    # From Webots: line_left_bit = sensor_bits_str[0] (e.g., '1' for line, '0' for no line)
    # The current parsing converts: gs_val_left = 0 if line_left_bit == '1' else 1023
    # So gs_val_left = 0 means line detected, gs_val_left = 1023 means no line.
    # This means the sensor values are "inverted" compared to what's often expected for line following.
    # Let's adjust the `calculate_line_error` function to reflect this "inverted" interpretation.

    # If gs_val_X is 0, it means a line is detected (high activation).
    # If gs_val_X is 1023, it means no line (low activation).
    # We want a higher weight for detected lines.
    
    right_val = 1.0 if line_right < line_threshold else 0.0 # Line detected if value is low
    center_val = 1.0 if line_center < line_threshold else 0.0
    left_val = 1.0 if line_left < line_threshold else 0.0

    total_activation = right_val + center_val + left_val

    if total_activation < 0.1: # No line detected on any sensor
        return None
    
    # Calculate error based on activated sensors
    # If all are 1, error is 0 (centered)
    # If right is 1, error is positive
    # If left is 1, error is negative
    error = (right_val * 1.0 + center_val * 0.0 + left_val * (-1.0)) / total_activation
    return error

def detect_intersection(line_left, line_center, line_right):
    line_threshold = 600.0 # Same threshold as in Webots controller for line detection
    return line_right < line_threshold and line_center < line_threshold and line_left < line_threshold

def advanced_line_following_control(line_left_val, line_center_val, line_right_val):
    global previous_error, integral_error, error_history
    global consecutive_no_line, last_known_direction

    current_error = calculate_line_error(line_left_val, line_center_val, line_right_val)

    if current_error is None:
        consecutive_no_line += 1
        if consecutive_no_line < max_no_line_steps:
            if last_known_direction == 'left': current_error = -0.6
            elif last_known_direction == 'right': current_error = 0.6
            else: current_error = 0.0
        else:
            return base_speed * 0.3, base_speed * 0.3 # Slow down if lost line for too long
    else:
        consecutive_no_line = 0
        if current_error < -0.2: last_known_direction = 'left'
        elif current_error > 0.2: last_known_direction = 'right'
        else: last_known_direction = 'center'

    if current_error is not None: error_history.append(current_error)

    proportional = current_error if current_error is not None else 0.0

    if consecutive_no_line == 0 and current_error is not None:
        integral_error += current_error
    else:
        integral_error *= 0.9 # Decay integral if no line
    integral_error = max(min(integral_error, 2.0), -2.0) # Clamp integral error

    derivative = 0.0
    if len(error_history) >= 2:
        derivative = error_history[-1] - error_history[-2]

    pid_output = kp * proportional + ki * integral_error + kd * derivative
    pid_output = max(min(pid_output, 1.0), -1.0) # Clamp PID output

    turn_adjustment = pid_output * max_turn_speed_diff

    leftSpeed = base_speed - turn_adjustment
    rightSpeed = base_speed + turn_adjustment

    leftSpeed = max(min(leftSpeed, MAX_SPEED), base_speed * 0.2) # Clamp to valid speed range
    rightSpeed = max(min(rightSpeed, MAX_SPEED), base_speed * 0.2)

    if current_error is not None: previous_error = current_error

    return leftSpeed, rightSpeed

def execute_improved_turn(action_str, current_phi):
    global stop_counter, turn_counter, post_turn_counter
    global turn_start_heading, expected_heading_change
    global heading_tolerance, turn_kp

    turn_speed_base = MAX_SPEED * 0.5

    if stop_counter < STOP_DURATION:
        if stop_counter == 0:
            turn_start_heading = current_phi # Use the actual current heading
            print(f"Starting turn sequence: {action_str}")
            print(f"Initial heading: {current_phi:.3f} rad ({math.degrees(current_phi):.1f}°)")
            print(f"Expected change: {expected_heading_change:.3f} rad ({math.degrees(expected_heading_change):.1f}°)")
        stop_counter += 1
        return 0.0, 0.0, False, False

    target_heading = normalize_angle(turn_start_heading + expected_heading_change)
    current_heading_normalized = normalize_angle(current_phi)
    heading_error = math.atan2(math.sin(target_heading - current_heading_normalized), math.cos(target_heading - current_heading_normalized))

    if abs(heading_error) < heading_tolerance:
        if post_turn_counter < POST_TURN_PAUSE:
            post_turn_counter += 1
            return 0.0, 0.0, False, False
        else:
            print(f"Turn sequence completed! Final heading: {math.degrees(current_phi):.1f}°, Target was: {math.degrees(target_heading):.1f}°")
            return 0.0, 0.0, True, True

    turn_adjustment = turn_kp * heading_error

    raw_left_speed = -turn_adjustment
    raw_right_speed = turn_adjustment

    min_abs_turn_speed = turn_speed_base * 0.1
    additional_boost = turn_speed_base * 0.2

    if heading_error > 0: # Turning Left (CCW)
        final_left_speed = min(raw_left_speed - additional_boost, -min_abs_turn_speed)
        final_right_speed = max(raw_right_speed + additional_boost, min_abs_turn_speed)
    else: # Turning Right (CW)
        final_left_speed = max(raw_left_speed + additional_boost, min_abs_turn_speed)
        final_right_speed = min(raw_right_speed - additional_boost, -min_abs_turn_speed)

    final_left_speed = max(min(final_left_speed, MAX_SPEED), -MAX_SPEED)
    final_right_speed = max(min(final_right_speed, MAX_SPEED), -MAX_SPEED)

    turn_counter += 1
    return final_left_speed, final_right_speed, False, False

def search_for_line_after_turn(line_left_val, line_center_val, line_right_val):
    global line_search_counter
    line_search_counter += 1
    line_error = calculate_line_error(line_left_val, line_center_val, line_right_val)

    if line_error is not None:
        print(f"Line found after turn! Error: {line_error:.3f}")
        return True, advanced_line_following_control(line_left_val, line_center_val, line_right_val)

    if line_search_counter < LINE_SEARCH_DURATION:
        search_speed = base_speed * 0.3
        # Simple back-and-forth search
        if (line_search_counter // 5) % 2 == 0:
            return False, (search_speed * 0.8, search_speed * 1.2) # Turn slightly right
        else:
            return False, (search_speed * 1.2, search_speed * 0.8) # Turn slightly left
    else:
        print("Line search timeout - proceeding with slow forward motion")
        return True, (base_speed * 0.5, base_speed * 0.5) # Try moving forward slowly

def reset_turn_counters():
    global stop_counter, turn_counter, post_turn_counter, line_search_counter
    stop_counter, turn_counter, post_turn_counter, line_search_counter = 0, 0, 0, 0

def replan_path_with_blocked_node(start, goal, grid_map, blocked_list):
    print(f"Replanning path from {start} to {goal}, avoiding {blocked_list}")
    new_path = find_path_dijkstra(start, goal, grid_map, blocked_list)
    return new_path

# --- Main Loop (ESP32) ---
print(f"Starting ESP32 brain. Navigating from {start_node} to {goal_node}")

leftSpeed, rightSpeed = 0.0, 0.0
current_phi = -math.pi/2 # Initial heading of the robot in Webots. This will be updated by Webots feedback.

# Initialize this counter
intersection_drive_through_counter = 0

while True:
    # 1. Read Sensor Data from Webots
    if uart.any():
        try:
            full_message = uart.read_all().decode('UTF-8').strip()
            messages = full_message.split('\n')
            latest_valid_msg = None
            for msg in reversed(messages):
                if len(msg.split(',')) == 2:
                    latest_valid_msg = msg
                    break

            if latest_valid_msg:
                parts = latest_valid_msg.split(',')
                sensor_bits_str = parts[0]
                phi_degrees_str = parts[1]

                line_left_bit = sensor_bits_str[0]
                line_center_bit = sensor_bits_str[1]
                line_right_bit = sensor_bits_str[2]
                ps_front_left_bit = sensor_bits_str[3]
                ps_front_right_bit = sensor_bits_str[4]

                # Map sensor bits to "raw" values for `calculate_line_error` and `detect_intersection`
                # 0 means line detected (low sensor reading), 1023 means no line (high sensor reading)
                gs_val_left = 0 if line_left_bit == '1' else 1023
                gs_val_center = 0 if line_center_bit == '1' else 1023
                gs_val_right = 0 if line_right_bit == '1' else 1023

                obstacle_detected_front = (ps_front_left_bit == '1' or ps_front_right_bit == '1')

                try:
                    current_phi = math.radians(float(phi_degrees_str))
                except ValueError:
                    print(f"WARNING: Invalid phi value from Webots: {phi_degrees_str}")

            else:
                pass
        except UnicodeDecodeError:
            print("WARNING: Incomplete UTF-8 sequence received from Webots.")
        except IndexError:
            print("WARNING: Malformed message received (IndexError).")
        except Exception as e:
            print(f"An unexpected error occurred during UART read: {e}")

    # --- State Machine for Robot Navigation ---

    # Obstacle avoidance state handling (high priority)
    if robot_state == 'obstacle_turn_180':
        leftSpeed, rightSpeed, _, turn_fully_completed = execute_improved_turn('turn_around', current_phi)
        if turn_fully_completed:
            print("180 degree turn completed for obstacle avoidance. Starting replanning.")
            robot_state = 'obstacle_replan'
            reset_turn_counters()
    elif robot_state == 'obstacle_replan':
        if node_that_caused_obstacle and node_that_caused_obstacle not in blocked_nodes_for_replan:
            blocked_nodes_for_replan.add(node_that_caused_obstacle)
            print(f"Adding '{node_that_caused_obstacle}' to temporarily blocked nodes for replanning.")
        new_path = replan_path_with_blocked_node(current_node, goal_node, corrected_weighted_grid, blocked_nodes_for_replan)
        if len(new_path) > 1:
            path = new_path
            next_node_index = 1
            print(f"Replanning successful! New path: {' -> '.join(path)}")
            robot_state = 'post_turn_line_search'
            integral_error, previous_error, consecutive_no_line = 0.0, 0.0, 0
            error_history.clear()
            reset_turn_counters()
        else:
            print("Replanning failed! No alternative path found. Stopping.")
            robot_state = 'stopping'
        leftSpeed, rightSpeed = 0.0, 0.0 # Ensure stopped during replan logic

    # If in an obstacle avoidance state, motor speeds are set, continue to next iteration
    if robot_state in ['obstacle_turn_180', 'obstacle_replan']:
        pass # Speeds already set by previous block, just proceed to sending them

    else: # Normal navigation logic
        # Goal check
        if current_node == goal_node and robot_state not in ['turning', 'at_intersection_drive_through']:
            if robot_state != 'stopping':
                print("Mission completed! Reached goal node.")
                robot_state = 'stopping'

        # Path validity check
        if not path or (next_node_index >= len(path) and current_node != goal_node):
            if robot_state != 'stopping':
                print("Path exhausted or invalid and not at goal. Stopping robot.")
                robot_state = 'stopping'

        target_node_for_segment = None
        if path and next_node_index < len(path):
            target_node_for_segment = path[next_node_index]
        elif robot_state != 'stopping':
            print(f"Warning: Path may have ended prematurely. Current: {current_node}, Goal: {goal_node}, State: {robot_state}")
            if current_node != goal_node: robot_state = 'stopping'

        if robot_state == 'line_following':
            if obstacle_detected_front:
                print(f"OBSTACLE DETECTED! Transitioning to obstacle_turn_180. Obstacle was towards node: {target_node_for_segment if target_node_for_segment else 'Unknown'}")
                robot_state = 'obstacle_turn_180'
                node_that_caused_obstacle = target_node_for_segment
                expected_heading_change = math.pi
                reset_turn_counters()
                leftSpeed, rightSpeed = 0.0, 0.0
            else:
                intersection_detected_flag = detect_intersection(gs_val_left, gs_val_center, gs_val_right)
                if intersection_detected_flag:
                    cross_counter += 1
                    if cross_counter >= CROSS_COUNTER_MIN:
                        print(f"Intersection detected! Current: {current_node}, Target for segment: {target_node_for_segment if target_node_for_segment else 'Unknown'}")
                        robot_state = 'at_intersection_drive_through'
                        intersection_drive_through_counter = 0
                        cross_counter = 0
                        integral_error, previous_error = 0.0, 0.0
                        error_history.clear()
                else:
                    cross_counter = 0
                leftSpeed, rightSpeed = advanced_line_following_control(gs_val_left, gs_val_center, gs_val_right)

        elif robot_state == 'at_intersection_drive_through':
            if intersection_drive_through_counter < INTERSECTION_DRIVE_THROUGH_DURATION:
                leftSpeed, rightSpeed = base_speed * 0.4, base_speed * 0.4
                intersection_drive_through_counter += 1
            else:
                print("Finished driving through intersection. Processing intersection logic.")
                robot_state = 'at_intersection'
                leftSpeed, rightSpeed = 0.0, 0.0

        elif robot_state == 'at_intersection':
            print(f"DEBUG: at_intersection. Internal current_node (before update): {current_node}, Arrived at: {target_node_for_segment if target_node_for_segment else 'Error: No Target'}")
            node_robot_was_at = current_node
            current_node = target_node_for_segment if target_node_for_segment else current_node

            print(f"Updating current_node from {node_robot_was_at} to {current_node}.")

            # Heading Correction Heuristic (uses current_phi from Webots)
            if path and next_node_index > 0 and (next_node_index -1) < len(path) :
                node_before_this_intersection = path[next_node_index - 1]
                direction_travelled = get_direction_to_next_node(node_before_this_intersection, current_node, corrected_weighted_grid)
                direction_angles_map = {'N': math.pi/2, 'E': 0, 'S': -math.pi/2, 'W': math.pi}
                if direction_travelled and direction_travelled in direction_angles_map:
                    expected_phi_at_arrival = direction_angles_map[direction_travelled]
                    print(f"DEBUG: Heading correction. Came from: {node_before_this_intersection}, Arrived at: {current_node}, Via: {direction_travelled}, Exp. phi: {math.degrees(expected_phi_at_arrival):.1f}°")
                    current_phi = normalize_angle(expected_phi_at_arrival) # Correct ESP32's internal phi
                    print(f"DEBUG: Corrected internal phi to {math.degrees(current_phi):.1f}°.")
                else:
                    print(f"WARNING: Could not infer direction for heading correction. Current phi: {math.degrees(current_phi):.1f}°")
            else:
                 print(f"WARNING: Cannot perform heading correction - path/index issue. Path len: {len(path if path else [])}, next_idx: {next_node_index}")

            # Decide next action
            if current_node == goal_node:
                print(f"Reached goal node {current_node} during intersection processing. Stopping.")
                robot_state = 'stopping'
            elif path and next_node_index < len(path) - 1:
                next_node_index += 1
                new_target_for_action = path[next_node_index]
                direction_needed = get_direction_to_next_node(current_node, new_target_for_action, corrected_weighted_grid)
                if direction_needed:
                    turn_action, expected_heading_change = direction_to_robot_action(direction_needed, current_phi)
                    print(f"At {current_node}, to {new_target_for_action}: Dir={direction_needed}, Act={turn_action}, Angle={math.degrees(expected_heading_change):.1f}°")
                    if turn_action == 'forward':
                        robot_state = 'line_following'
                        integral_error, previous_error, consecutive_no_line = 0.0, 0.0, 0
                        error_history.clear()
                    else:
                        robot_state = 'turning'
                        reset_turn_counters()
                else:
                    print(f"ERROR: No valid next direction from {current_node} to {new_target_for_action}. Stopping.")
                    robot_state = 'stopping'
            else:
                if current_node != goal_node:
                     print(f"Path ended at {current_node} (which is not the goal {goal_node}). Stopping.")
                else:
                     print(f"At goal node {current_node}. Final stop.")
                robot_state = 'stopping'
            if robot_state == 'stopping': leftSpeed, rightSpeed = 0.0, 0.0

        elif robot_state == 'turning':
            leftSpeed, rightSpeed, _, turn_fully_completed = execute_improved_turn(turn_action, current_phi)
            if turn_fully_completed:
                print(f"Turn sequence completed! Transitioning to line search...")
                robot_state = 'post_turn_line_search'
                reset_turn_counters()
                integral_error, previous_error, consecutive_no_line = 0.0, 0.0, 0
                error_history.clear()

        elif robot_state == 'post_turn_line_search':
            line_found, (current_leftSpeed, current_rightSpeed) = search_for_line_after_turn(gs_val_left, gs_val_center, gs_val_right)
            leftSpeed, rightSpeed = current_leftSpeed, current_rightSpeed
            if line_found:
                print("Line search phase ended. Resuming line following (or attempting to).")
                robot_state = 'line_following'
                reset_turn_counters()

        elif robot_state == 'stopping':
            leftSpeed, rightSpeed = 0.0, 0.0

    # 2. Send Motor Commands to Webots
    command_to_webots = f"{leftSpeed:.2f},{rightSpeed:.2f}\n"
    try:
        uart.write(command_to_webots.encode('UTF-8'))
    except Exception as e:
        print(f"ERROR: Failed to write motor command to UART: {e}")

    sleep(0.01) # Small delay to allow Webots to process and for stable UART communication